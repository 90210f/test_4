import sys
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                             QHBoxLayout, QLabel, QLineEdit, QTextEdit,
                             QPushButton, QListWidget, QMessageBox)
import sqlite3


class NotesApp ( QMainWindow ) :
    def __init__(self) :
        super ().__init__ ()
        self.setWindowTitle ( "Менеджер заметок" )
        self.setGeometry ( 100, 100, 800, 600 )

        self.conn = sqlite3.connect ( 'notes.db' )
        self.create_table ()

        self.main_widget = QWidget ()
        self.setCentralWidget ( self.main_widget )

        self.init_ui ()

        self.load_notes ()

    def create_table(self) :
        cursor = self.conn.cursor ()
        cursor.execute ( '''
            CREATE TABLE IF NOT EXISTS notes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                content TEXT NOT NULL
            )
        ''' )
        self.conn.commit ()

    def init_ui(self) :
        # Основной макет
        layout = QHBoxLayout ()

        # Левая панель - список заметок
        self.notes_list = QListWidget ()
        self.notes_list.itemClicked.connect ( self.show_note )
        layout.addWidget ( self.notes_list, 1 )

        right_panel = QVBoxLayout ()

        self.title_label = QLabel ( "Заголовок:" )
        self.title_input = QLineEdit ()
        right_panel.addWidget ( self.title_label )
        right_panel.addWidget ( self.title_input )

        self.content_label = QLabel ( "Содержимое:" )
        self.content_input = QTextEdit ()
        right_panel.addWidget ( self.content_label )
        right_panel.addWidget ( self.content_input )

        buttons_layout = QHBoxLayout ()

        self.new_button = QPushButton ( "Новая заметка" )
        self.new_button.clicked.connect ( self.new_note )
        buttons_layout.addWidget ( self.new_button )

        self.save_button = QPushButton ( "Сохранить" )
        self.save_button.clicked.connect ( self.save_note )
        buttons_layout.addWidget ( self.save_button )

        self.delete_button = QPushButton ( "Удалить" )
        self.delete_button.clicked.connect ( self.delete_note )
        buttons_layout.addWidget ( self.delete_button )

        right_panel.addLayout ( buttons_layout )

        layout.addLayout ( right_panel, 2 )
        self.main_widget.setLayout ( layout )

    def load_notes(self) :
        self.notes_list.clear ()
        cursor = self.conn.cursor ()
        cursor.execute ( "SELECT id, title FROM notes" )
        notes = cursor.fetchall ()

        for note_id, title in notes :
            self.notes_list.addItem ( f"{note_id}: {title}" )

    def show_note(self, item) :
        note_id = int ( item.text ().split ( ":" )[0] )
        cursor = self.conn.cursor ()
        cursor.execute ( "SELECT title, content FROM notes WHERE id=?", (note_id,) )
        title, content = cursor.fetchone ()

        self.title_input.setText ( title )
        self.content_input.setPlainText ( content )
        self.current_note_id = note_id

    def new_note(self) :
        self.title_input.clear ()
        self.content_input.clear ()
        self.current_note_id = None

    def save_note(self) :
        title = self.title_input.text ().strip ()
        content = self.content_input.toPlainText ().strip ()

        if not title :
            QMessageBox.warning ( self, "Ошибка", "Заголовок не может быть пустым!" )
            return

        cursor = self.conn.cursor ()

        if self.current_note_id is None :
            cursor.execute ( "INSERT INTO notes (title, content) VALUES (?, ?)",
                             (title, content) )
        else :
            cursor.execute ( "UPDATE notes SET title=?, content=? WHERE id=?",
                             (title, content, self.current_note_id) )

        self.conn.commit ()
        self.load_notes ()

        if self.current_note_id is None :
            self.current_note_id = cursor.lastrowid
            self.show_note ( self.notes_list.item ( self.notes_list.count () - 1 ) )

    def delete_note(self) :
        if self.current_note_id is None :
            return

        reply = QMessageBox.question ( self, 'Удаление',
                                       'Вы уверены, что хотите удалить эту заметку?',
                                       QMessageBox.Yes | QMessageBox.No, QMessageBox.No )

        if reply == QMessageBox.Yes :
            cursor = self.conn.cursor ()
            cursor.execute ( "DELETE FROM notes WHERE id=?", (self.current_note_id,) )
            self.conn.commit ()
            self.new_note ()
            self.load_notes ()

    def closeEvent(self, event) :
        self.conn.close ()
        event.accept ()


if __name__ == "__main__" :
    app = QApplication(sys.argv )
    window = NotesApp()
    window.show()
    sys.exit(app.exec_())


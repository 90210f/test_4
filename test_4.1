import os
import sqlite3
import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout,
                             QLabel, QTextEdit, QPushButton,
                             QFileDialog, QMessageBox, QInputDialog)
from PyQt5.QtCore import Qt

class NoteApp(QWidget):
    def __init__(self):
        super().__init__()
        self.current_file = None
        self.db_connect()
        self.init_ui()

    def db_connect(self):
        self.con = sqlite3.connect("notes.db")
        self.cursor = self.con.cursor()
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS notes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                filename TEXT UNIQUE,
                content TEXT,
                priority INTEGER DEFAULT 1
            )
        """)
        self.con.commit()

    def init_ui(self):
        self.setWindowTitle("Приложение для Заметок")
        self.setGeometry(100, 100, 800, 600)

        layout = QVBoxLayout()

        self.label = QLabel("Редактор заметок")
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setStyleSheet("font-size: 16px; font-weight: bold;")
        layout.addWidget(self.label)

        self.text_edit = QTextEdit()
        self.text_edit.setPlaceholderText("Введите текст заметки здесь...")
        layout.addWidget(self.text_edit)

        buttons_layout = QVBoxLayout()

        self.create_button = QPushButton("Создать новую заметку")
        self.create_button.setStyleSheet("background-color: #4CAF50; color: white;")
        self.create_button.clicked.connect(self.create_note)
        buttons_layout.addWidget(self.create_button)

        self.open_button = QPushButton("Открыть заметку")
        self.open_button.setStyleSheet("background-color: #2196F3; color: white;")
        self.open_button.clicked.connect(self.open_note)
        buttons_layout.addWidget(self.open_button)

        self.save_button = QPushButton("Сохранить заметку")
        self.save_button.setStyleSheet("background-color: #FFC107; color: black;")
        self.save_button.clicked.connect(self.save_note)
        buttons_layout.addWidget(self.save_button)

        self.save_as_button = QPushButton("Сохранить как...")
        self.save_as_button.setStyleSheet("background-color: #FF9800; color: white;")
        self.save_as_button.clicked.connect(self.save_note_as)
        buttons_layout.addWidget(self.save_as_button)

        self.add_button = QPushButton("Добавить текст")
        self.add_button.setStyleSheet("background-color: #9E9E9E; color: white;")
        self.add_button.clicked.connect(self.add_text)
        buttons_layout.addWidget(self.add_button)

        layout.addLayout(buttons_layout)
        self.setLayout(layout)

    def create_note(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, "Создать новую заметку", 
            "", "Text Files (*.txt);;All Files (*)")
        if filename:
            self.current_file = filename
            self.text_edit.clear()
            self.label.setText(f"Редактирование: {os.path.basename(filename)}")
            self.save_to_db()

    def open_note(self):
        filename, _ = QFileDialog.getOpenFileName(
            self, "Открыть заметку", 
            "", "Text Files (*.txt);;All Files (*)")
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as file:
                    content = file.read()
                self.text_edit.setText(content)
                self.current_file = filename
                self.label.setText(f"Редактирование: {os.path.basename(filename)}")
                self.save_to_db()
            except Exception as e:
                QMessageBox.critical(self, "Ошибка", f"Не удалось открыть файл:\n{e}")

    def save_note(self):
        if self.current_file:
            self.save_note_to_file(self.current_file)
        else:
            self.save_note_as()

    def save_note_as(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, "Сохранить заметку как", 
            "", "Text Files (*.txt);;All Files (*)")
        if filename:
            self.current_file = filename
            self.save_note_to_file(filename)
            self.label.setText(f"Редактирование: {os.path.basename(filename)}")

    def save_note_to_file(self, filename):
        try:
            content = self.text_edit.toPlainText()
            with open(filename, 'w', encoding='utf-8') as file:
                file.write(content)
            self.save_to_db()
            QMessageBox.information(self, "Успех", "Заметка успешно сохранена!")
        except Exception as e:
            QMessageBox.critical(self, "Ошибка", f"Не удалось сохранить файл:\n{e}")

    def add_text(self):
        text, ok = QInputDialog.getText(
            self, "Добавить текст", 
            "Введите текст для добавления:")
        if ok and text:
            self.text_edit.append(text)

    def save_to_db(self):
        if self.current_file:
            try:
                content = self.text_edit.toPlainText()
                self.cursor.execute(
                    "INSERT OR REPLACE INTO notes (filename, content) VALUES (?, ?)",
                    (self.current_file, content))
                self.con.commit()
            except Exception as e:
                print(f"Ошибка при сохранении в БД: {e}")

    def closeEvent(self, event):
        self.con.close()
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = NoteApp()
    window.show()
    sys.exit(app.exec_())
